// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/kv_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TSKVServiceClient is the client API for TSKVService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TSKVServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	AddSeries(ctx context.Context, in *AddSeriesRpcRequest, opts ...grpc.CallOption) (*AddSeriesRpcResponse, error)
	GetSeriesInfo(ctx context.Context, in *GetSeriesInfoRpcRequest, opts ...grpc.CallOption) (*GetSeriesInfoRpcResponse, error)
	WriteRows(ctx context.Context, opts ...grpc.CallOption) (TSKVService_WriteRowsClient, error)
	WritePoints(ctx context.Context, opts ...grpc.CallOption) (TSKVService_WritePointsClient, error)
}

type tSKVServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTSKVServiceClient(cc grpc.ClientConnInterface) TSKVServiceClient {
	return &tSKVServiceClient{cc}
}

func (c *tSKVServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/kv_service.TSKVService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSKVServiceClient) AddSeries(ctx context.Context, in *AddSeriesRpcRequest, opts ...grpc.CallOption) (*AddSeriesRpcResponse, error) {
	out := new(AddSeriesRpcResponse)
	err := c.cc.Invoke(ctx, "/kv_service.TSKVService/AddSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSKVServiceClient) GetSeriesInfo(ctx context.Context, in *GetSeriesInfoRpcRequest, opts ...grpc.CallOption) (*GetSeriesInfoRpcResponse, error) {
	out := new(GetSeriesInfoRpcResponse)
	err := c.cc.Invoke(ctx, "/kv_service.TSKVService/GetSeriesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSKVServiceClient) WriteRows(ctx context.Context, opts ...grpc.CallOption) (TSKVService_WriteRowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TSKVService_ServiceDesc.Streams[0], "/kv_service.TSKVService/WriteRows", opts...)
	if err != nil {
		return nil, err
	}
	x := &tSKVServiceWriteRowsClient{stream}
	return x, nil
}

type TSKVService_WriteRowsClient interface {
	Send(*WriteRowsRpcRequest) error
	Recv() (*WriteRowsRpcResponse, error)
	grpc.ClientStream
}

type tSKVServiceWriteRowsClient struct {
	grpc.ClientStream
}

func (x *tSKVServiceWriteRowsClient) Send(m *WriteRowsRpcRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tSKVServiceWriteRowsClient) Recv() (*WriteRowsRpcResponse, error) {
	m := new(WriteRowsRpcResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tSKVServiceClient) WritePoints(ctx context.Context, opts ...grpc.CallOption) (TSKVService_WritePointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TSKVService_ServiceDesc.Streams[1], "/kv_service.TSKVService/WritePoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &tSKVServiceWritePointsClient{stream}
	return x, nil
}

type TSKVService_WritePointsClient interface {
	Send(*WritePointsRpcRequest) error
	Recv() (*WritePointsRpcResponse, error)
	grpc.ClientStream
}

type tSKVServiceWritePointsClient struct {
	grpc.ClientStream
}

func (x *tSKVServiceWritePointsClient) Send(m *WritePointsRpcRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tSKVServiceWritePointsClient) Recv() (*WritePointsRpcResponse, error) {
	m := new(WritePointsRpcResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TSKVServiceServer is the server API for TSKVService service.
// All implementations must embed UnimplementedTSKVServiceServer
// for forward compatibility
type TSKVServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	AddSeries(context.Context, *AddSeriesRpcRequest) (*AddSeriesRpcResponse, error)
	GetSeriesInfo(context.Context, *GetSeriesInfoRpcRequest) (*GetSeriesInfoRpcResponse, error)
	WriteRows(TSKVService_WriteRowsServer) error
	WritePoints(TSKVService_WritePointsServer) error
	mustEmbedUnimplementedTSKVServiceServer()
}

// UnimplementedTSKVServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTSKVServiceServer struct {
}

func (UnimplementedTSKVServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTSKVServiceServer) AddSeries(context.Context, *AddSeriesRpcRequest) (*AddSeriesRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeries not implemented")
}
func (UnimplementedTSKVServiceServer) GetSeriesInfo(context.Context, *GetSeriesInfoRpcRequest) (*GetSeriesInfoRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeriesInfo not implemented")
}
func (UnimplementedTSKVServiceServer) WriteRows(TSKVService_WriteRowsServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteRows not implemented")
}
func (UnimplementedTSKVServiceServer) WritePoints(TSKVService_WritePointsServer) error {
	return status.Errorf(codes.Unimplemented, "method WritePoints not implemented")
}
func (UnimplementedTSKVServiceServer) mustEmbedUnimplementedTSKVServiceServer() {}

// UnsafeTSKVServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TSKVServiceServer will
// result in compilation errors.
type UnsafeTSKVServiceServer interface {
	mustEmbedUnimplementedTSKVServiceServer()
}

func RegisterTSKVServiceServer(s grpc.ServiceRegistrar, srv TSKVServiceServer) {
	s.RegisterService(&TSKVService_ServiceDesc, srv)
}

func _TSKVService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSKVServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv_service.TSKVService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSKVServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSKVService_AddSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSeriesRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSKVServiceServer).AddSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv_service.TSKVService/AddSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSKVServiceServer).AddSeries(ctx, req.(*AddSeriesRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSKVService_GetSeriesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeriesInfoRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSKVServiceServer).GetSeriesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv_service.TSKVService/GetSeriesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSKVServiceServer).GetSeriesInfo(ctx, req.(*GetSeriesInfoRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSKVService_WriteRows_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TSKVServiceServer).WriteRows(&tSKVServiceWriteRowsServer{stream})
}

type TSKVService_WriteRowsServer interface {
	Send(*WriteRowsRpcResponse) error
	Recv() (*WriteRowsRpcRequest, error)
	grpc.ServerStream
}

type tSKVServiceWriteRowsServer struct {
	grpc.ServerStream
}

func (x *tSKVServiceWriteRowsServer) Send(m *WriteRowsRpcResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tSKVServiceWriteRowsServer) Recv() (*WriteRowsRpcRequest, error) {
	m := new(WriteRowsRpcRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TSKVService_WritePoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TSKVServiceServer).WritePoints(&tSKVServiceWritePointsServer{stream})
}

type TSKVService_WritePointsServer interface {
	Send(*WritePointsRpcResponse) error
	Recv() (*WritePointsRpcRequest, error)
	grpc.ServerStream
}

type tSKVServiceWritePointsServer struct {
	grpc.ServerStream
}

func (x *tSKVServiceWritePointsServer) Send(m *WritePointsRpcResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tSKVServiceWritePointsServer) Recv() (*WritePointsRpcRequest, error) {
	m := new(WritePointsRpcRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TSKVService_ServiceDesc is the grpc.ServiceDesc for TSKVService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TSKVService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kv_service.TSKVService",
	HandlerType: (*TSKVServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TSKVService_Ping_Handler,
		},
		{
			MethodName: "AddSeries",
			Handler:    _TSKVService_AddSeries_Handler,
		},
		{
			MethodName: "GetSeriesInfo",
			Handler:    _TSKVService_GetSeriesInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteRows",
			Handler:       _TSKVService_WriteRows_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WritePoints",
			Handler:       _TSKVService_WritePoints_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/kv_service.proto",
}
