// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RowField struct {
	_tab flatbuffers.Table
}

func GetRootAsRowField(buf []byte, offset flatbuffers.UOffsetT) *RowField {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RowField{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRowField(buf []byte, offset flatbuffers.UOffsetT) *RowField {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RowField{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RowField) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RowField) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RowField) FieldId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RowField) MutateFieldId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *RowField) Type() FieldType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return FieldType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *RowField) MutateType(n FieldType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *RowField) Value(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *RowField) ValueLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RowField) ValueBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RowField) MutateValue(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func RowFieldStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RowFieldAddFieldId(builder *flatbuffers.Builder, fieldId uint64) {
	builder.PrependUint64Slot(0, fieldId, 0)
}
func RowFieldAddType(builder *flatbuffers.Builder, type_ FieldType) {
	builder.PrependInt32Slot(1, int32(type_), 0)
}
func RowFieldAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(value), 0)
}
func RowFieldStartValueVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RowFieldEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
