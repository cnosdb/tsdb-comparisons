// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ColumnKeysWithRange struct {
	_tab flatbuffers.Table
}

func GetRootAsColumnKeysWithRange(buf []byte, offset flatbuffers.UOffsetT) *ColumnKeysWithRange {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ColumnKeysWithRange{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsColumnKeysWithRange(buf []byte, offset flatbuffers.UOffsetT) *ColumnKeysWithRange {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ColumnKeysWithRange{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ColumnKeysWithRange) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ColumnKeysWithRange) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ColumnKeysWithRange) ColumnKeys(obj *ColumnKey, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 16
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ColumnKeysWithRange) ColumnKeysLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ColumnKeysWithRange) Min() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ColumnKeysWithRange) MutateMin(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ColumnKeysWithRange) Max() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ColumnKeysWithRange) MutateMax(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func ColumnKeysWithRangeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ColumnKeysWithRangeAddColumnKeys(builder *flatbuffers.Builder, columnKeys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(columnKeys), 0)
}
func ColumnKeysWithRangeStartColumnKeysVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(16, numElems, 8)
}
func ColumnKeysWithRangeAddMin(builder *flatbuffers.Builder, min int64) {
	builder.PrependInt64Slot(1, min, 0)
}
func ColumnKeysWithRangeAddMax(builder *flatbuffers.Builder, max int64) {
	builder.PrependInt64Slot(2, max, 0)
}
func ColumnKeysWithRangeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
